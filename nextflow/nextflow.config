/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {
    // Input file
    sample_id                   = null
    bed                         = null
    bam                         = null
    bai                         = null
    skip_filter                 = false

    // Database options
    database                    = null
    bed_dir                     = null

    // sentieon options
    sentieon_license            = null
    sentieon_release_version    = 'v202308.03'
    sentieon_auth_mech          = null
    sentieon_auth_data          = null

    // Output file
    outdir                      = null

    // References
    genome                      = 'GRCh37'

    // Other options
    docker_registry             = 'registry.cn-shenzhen.aliyuncs.com/gls-nextflow'
    publish_dir_mode            = 'copy'

    max_memory                  = '128.GB'
    max_cpus                    = 50
    max_time                    = '20.h'
}


profiles {
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Set default registry for Docker and Podman independent of -profile
// Will not be used unless Docker / Podman are enabled
// Set to your registry if you have a mirror of containers
docker.registry = ''

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'NGS4THAL'
    author          = """Nam Le"""
    homePage        = 'https://github.com/namxle/NGS4THAL'
    description     = """NGS4THAL"""
    mainScript      = 'result.nf'
    nextflowVersion = '!>=24.0.10'
    version         = '1.0.0'
}

// Load modules
includeConfig './base.config'
includeConfig './modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
